// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
console.log("Here 1");
var SupplyChain = artifacts.require('SupplyChain')

console.log("Here 2");
contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    var baleId = 1
    var sampleId = 1
    var retailId = 1
    var strainName = "Trippy Purple Bubblegum Haze";
    var thcPct = 0
    var cbdPct = 0
    var numRetail = 0
    var stateStr = "Harvested";

    const ownerID = accounts[0]
    const originGrowerID = accounts[1]
    const growerID = accounts[1]
    const testerID = accounts[2]
    const distributorID = accounts[3]
    const retailerID = accounts[4]
    const consumerID = accounts[5]

    const originFarmName = "Happy Times Farm"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"

    const productNotes = "Best weed ever!"
    const growerPrice = web3.utils.toWei("40", "milliether");
    const distributorPrice = web3.utils.toWei("80", "milliether")
    const retailPrice = web3.utils.toWei("16", "milliether")
    var itemState = 0
    var numRetail = 0
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Grower: accounts[1] ", accounts[1])
    console.log("Tester: accounts[2] ", accounts[2])
    console.log("Distributor: accounts[3] ", accounts[3])
    console.log("Retailer: accounts[4] ", accounts[4])
    console.log("Consumer: accounts[5] ", accounts[5])


    // 1st Test
    it("Testing smart contract function harvestWeed() that allows a farmer to harvest cannabis", async() => {
        //const myContractInstance = await SupplyChain.new();
        //console.log("Contract size: ")
        //console.log(myContractInstance.constructor._json.deployedBytecode.length);
    
        const supplyChain = await SupplyChain.deployed()
    
        await supplyChain.addGrower(originGrowerID)    
        await supplyChain.addGrowerInfo(originGrowerID,originFarmName,originFarmInformation,
                                        originFarmLatitude,originFarmLongitude, {from: originGrowerID})

        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        supplyChain.Harvested(null, (error, event) => {
            eventEmitted = true
        })

        //
        // Mark an item as Harvested by calling function harvestWeed()
        //
        await supplyChain.harvestWeed(upc, baleId, originGrowerID, productNotes, {from: originGrowerID})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], originGrowerID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    })    

    // 2nd Test
    it("Testing smart contract function processWeed() that allows a farmer to process cannabis", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        //await supplyChain.addGrower(originGrowerID)    
        //await supplyChain.addGrowerInfo(originGrowerID,originFarmName,originFarmInformation,
        //                                originFarmLatitude,originFarmLongitude)

        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Processed()
        supplyChain.Processed(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "Processed";

        //
        // Mark an item as Processed by calling function processWeed()
        //
        await supplyChain.processWeed(upc, baleId, {from: originGrowerID})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], originGrowerID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    })    

    // 3rd Test
    it("Testing smart contract function sampleWeed() that allows a farmer to sample cannabis", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    

        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sampled()
        supplyChain.Sampled(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "Sampled";

        //
        // Mark an item as Sampled by calling function sampleWeed()
        //
        await supplyChain.sampleWeed(upc, baleId, testerID, {from: originGrowerID})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], originGrowerID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    })    


    // 4th Test
    it("Testing smart contract function requestSample() that allows a tester to request a sample of cannabis", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        await supplyChain.addTester(testerID)    

        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event SampleRequested()
        supplyChain.SampleRequested(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "Sample Requested";

        //
        // Mark an item as Sample Requested by calling function requestSample()
        //
        await supplyChain.requestSample(upc, baleId, {from: testerID})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], originGrowerID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    })    

    // 5th Test
    it("Testing smart contract function sendSampleToTester() that allows a grower to send sample to tester", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event SentToTester()
        supplyChain.SentToTester(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "Sent To Tester";

        //
        // Mark an item as Sampled by calling function sampleWeed()
        //
        await supplyChain.sendSampleToTester(upc, baleId, sampleId, {from: originGrowerID})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], originGrowerID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')
        assert.equal(addrsBuffer[2], testerID, 'Error: Missing or invalid testerID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    })    

    // 6th Test
    it("Testing smart contract function setReceivedByTester() that allows tester to receive sample", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ReceivedByTester()
        supplyChain.ReceivedByTester(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "Received By Tester";

        //
        // Mark an item as Sampled by calling function sampleWeed()
        //
        await supplyChain.setReceivedByTester(upc, baleId, sampleId, {from: testerID})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], originGrowerID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')
        assert.equal(addrsBuffer[2], testerID, 'Error: Missing or invalid testerID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    })    

    // 7th Test
    it("Testing smart contract function testSample() that allows tester to test sample", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event InTesting()
        supplyChain.InTesting(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "In Testing";

        //
        // Mark an item as In Testing  by calling function testSample()
        //
        await supplyChain.testSample(upc, baleId, sampleId, {from: testerID})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], originGrowerID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')
        assert.equal(addrsBuffer[2], testerID, 'Error: Missing or invalid testerID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    })    

    // 8th Test
    it("Testing smart contract function approveSample() that allows tester to approve sample", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Approved()
        supplyChain.Approved(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "Approved";
        thcPct = 30
        cbdPct = 1

        //
        // Mark an item as Approved by calling function approveSample()
        //
        await supplyChain.approveSample(upc, baleId, sampleId, {from: testerID})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], originGrowerID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')
        assert.equal(addrsBuffer[2], testerID, 'Error: Missing or invalid testerID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    })    

    // 9th Test
    it("Testing smart contract function productize() that allows grower to productize", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Approved()
        supplyChain.Productized(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "Productized";
        numRetail = 10;

        //
        // Mark an item as Productized by calling function productize()
        //
        await supplyChain.productize(upc, baleId, {from: originGrowerID})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], originGrowerID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')
        assert.equal(addrsBuffer[2], testerID, 'Error: Missing or invalid testerID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[7], numRetail, 'Error: Invalid item numRetail')
        assert.equal(baleInfoBuffer[8], originGrowerID, 'Error: Missing or invalid ownerID')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    }) 
   
    // 10th Test
    it("Testing smart contract function setForSaleByGrower() that allows grower to sell", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ForSaleByGrower()
        supplyChain.ForSaleByGrower(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "For Sale By Grower";

        //
        // Mark an item as ForSaleByGrower by calling function setForSaleByGrower()
        //
        await supplyChain.setForSaleByGrower(upc, baleId, growerPrice, {from: originGrowerID})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], originGrowerID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')
        assert.equal(addrsBuffer[2], testerID, 'Error: Missing or invalid testerID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[5], growerPrice, 'Error: Invalid item growerPrice')
        assert.equal(baleInfoBuffer[7], numRetail, 'Error: Invalid item numRetail')
        assert.equal(baleInfoBuffer[8], originGrowerID, 'Error: Missing or invalid ownerID')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    })   

    // 11th Test
    it("Testing smart contract function buyBaleFromGrower() that allows distributor to buy from grower", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        await supplyChain.addDistributor(distributorID)
    
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event SoldByGrower()
        supplyChain.SoldByGrower(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "Sold By Grower";

        //
        // Mark an item as ForSaleByGrower by calling function setForSaleByGrower()
        //
        await supplyChain.buyBaleFromGrower(upc, baleId, {from: distributorID, value: growerPrice})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], distributorID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')
        assert.equal(addrsBuffer[2], testerID, 'Error: Missing or invalid testerID')
        assert.equal(addrsBuffer[3], distributorID, 'Error: Missing or invalid distributorID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[5], growerPrice, 'Error: Invalid item growerPrice')
        assert.equal(baleInfoBuffer[7], numRetail, 'Error: Invalid item numRetail')
        assert.equal(baleInfoBuffer[8], distributorID, 'Error: Missing or invalid ownerID')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    })   

    // 12th Test
    it("Testing smart contract function shipToDistributor() that allows grower to ship to distributor", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ShippedToDistributor()
        supplyChain.ShippedToDistributor(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "Shipped To Distributor";

        //
        // Mark an item as ShippedToDistributor by calling function shipToDistributor()
        //
        await supplyChain.shipToDistributor(upc, baleId, {from: originGrowerID})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], distributorID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')
        assert.equal(addrsBuffer[2], testerID, 'Error: Missing or invalid testerID')
        assert.equal(addrsBuffer[3], distributorID, 'Error: Missing or invalid distributorID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[5], growerPrice, 'Error: Invalid item growerPrice')
        assert.equal(baleInfoBuffer[7], numRetail, 'Error: Invalid item numRetail')
        assert.equal(baleInfoBuffer[8], distributorID, 'Error: Missing or invalid ownerID')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    })   

    // 13th Test
    it("Testing smart contract function receivedByDistributor() that allows grower to say it was received", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ShippedToDistributor()
        supplyChain.ReceivedByDistributor(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "Received By Distributor";

        //
        // Mark an item as ReceivedByDistributor by calling function setReceivedByDistributor()
        //
        await supplyChain.setReceivedByDistributor(upc, baleId, {from: distributorID})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], distributorID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')
        assert.equal(addrsBuffer[2], testerID, 'Error: Missing or invalid testerID')
        assert.equal(addrsBuffer[3], distributorID, 'Error: Missing or invalid distributorID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[5], growerPrice, 'Error: Invalid item growerPrice')
        assert.equal(baleInfoBuffer[7], numRetail, 'Error: Invalid item numRetail')
        assert.equal(baleInfoBuffer[8], distributorID, 'Error: Missing or invalid ownerID')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    })   

    // 14th Test
    it("Testing smart contract function setForSaleByDistributor() that allows distributor to put bale for sale", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ShippedToDistributor()
        supplyChain.ForSaleByDistributor(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "For Sale By Distributor";

        //
        // Mark an item as ForSaleByDistributor by calling function setForSaleByDistributor()
        //
        await supplyChain.setForSaleByDistributor(upc, baleId, distributorPrice, {from: distributorID})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], distributorID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')
        assert.equal(addrsBuffer[2], testerID, 'Error: Missing or invalid testerID')
        assert.equal(addrsBuffer[3], distributorID, 'Error: Missing or invalid distributorID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[5], growerPrice, 'Error: Invalid item growerPrice')
        assert.equal(baleInfoBuffer[6], distributorPrice, 'Error: Invalid item distributorPrice')
        assert.equal(baleInfoBuffer[7], numRetail, 'Error: Invalid item numRetail')
        assert.equal(baleInfoBuffer[8], distributorID, 'Error: Missing or invalid ownerID')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    })   

    // 15th Test
    it("Testing smart contract function buyBaleFromDistributor() that allows distributor to buy from retailer", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        await supplyChain.addRetailer(retailerID)
    
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event SoldByGrower()
        supplyChain.SoldByDistributor(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "Sold By Distributor";

        //
        // Mark an item as SoldByDistributor by calling function buyBaleFromDistributor()
        //
        await supplyChain.buyBaleFromDistributor(upc, baleId, {from: retailerID, value: distributorPrice})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], retailerID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')
        assert.equal(addrsBuffer[2], testerID, 'Error: Missing or invalid testerID')
        assert.equal(addrsBuffer[3], distributorID, 'Error: Missing or invalid distributorID')
        assert.equal(addrsBuffer[4], retailerID, 'Error: Missing or invalid retailerID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[5], growerPrice, 'Error: Invalid item growerPrice')
        assert.equal(baleInfoBuffer[6], distributorPrice, 'Error: Invalid item distributorPrice')
        assert.equal(baleInfoBuffer[7], numRetail, 'Error: Invalid item numRetail')
        assert.equal(baleInfoBuffer[8], retailerID, 'Error: Missing or invalid ownerID')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
 
    }) 

    // 16th Test
    it("Testing smart contract function shipToRetailer() that allows distributor to ship to retailer", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ShippedToRetailer()
        supplyChain.ShippedToRetailer(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "Shipped To Retailer";

        //
        // Mark an item as ShippedToRetailer by calling function shipToRetailer()
        //
        await supplyChain.shipToRetailer(upc, baleId, {from: distributorID})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], retailerID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')
        assert.equal(addrsBuffer[2], testerID, 'Error: Missing or invalid testerID')
        assert.equal(addrsBuffer[3], distributorID, 'Error: Missing or invalid distributorID')
        assert.equal(addrsBuffer[4], retailerID, 'Error: Missing or invalid retailerID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[5], growerPrice, 'Error: Invalid item growerPrice')
        assert.equal(baleInfoBuffer[7], numRetail, 'Error: Invalid item numRetail')
        assert.equal(baleInfoBuffer[8], retailerID, 'Error: Missing or invalid ownerID')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    })   

    // 17th Test
    it("Testing smart contract function setReceivedByRetailer() that allows retailer to say it was received", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ReceivedByRetailer()
        supplyChain.ReceivedByRetailer(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "Received By Retailer";

        //
        // Mark an item as ReceivedByRetailer by calling function setReceivedByRetailer()
        //
        await supplyChain.setReceivedByRetailer(upc, baleId, {from: retailerID})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], retailerID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')
        assert.equal(addrsBuffer[2], testerID, 'Error: Missing or invalid testerID')
        assert.equal(addrsBuffer[3], distributorID, 'Error: Missing or invalid distributorID')
        assert.equal(addrsBuffer[4], retailerID, 'Error: Missing or invalid retailerID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[5], growerPrice, 'Error: Invalid item growerPrice')
        assert.equal(baleInfoBuffer[7], numRetail, 'Error: Invalid item numRetail')
        assert.equal(baleInfoBuffer[8], retailerID, 'Error: Missing or invalid ownerID')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    })   

    // 18th Test
    it("Testing smart contract function setForSaleByRetailer() that allows retailer to put items for sale", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ShippedToRetailer()
        supplyChain.ForSaleByRetailer(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "For Sale By Retailer";

        //
        // Mark an item as ForSaleByRetailer by calling function setForSaleByRetailer()
        //
        await supplyChain.setForSaleByRetailer(upc, baleId, retailPrice, {from: retailerID})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[0], retailerID, 'Error: Missing or invalid ownerID')
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')
        assert.equal(addrsBuffer[2], testerID, 'Error: Missing or invalid testerID')
        assert.equal(addrsBuffer[3], distributorID, 'Error: Missing or invalid distributorID')
        assert.equal(addrsBuffer[4], retailerID, 'Error: Missing or invalid retailerID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[5], growerPrice, 'Error: Invalid item growerPrice')
        assert.equal(baleInfoBuffer[6], distributorPrice, 'Error: Invalid item distributorPrice')
        assert.equal(baleInfoBuffer[7], numRetail, 'Error: Invalid item numRetail')
        assert.equal(baleInfoBuffer[8], retailerID, 'Error: Missing or invalid ownerID')
        assert.equal(baleInfoBuffer[9], stateStr, 'Error: Invalid item State as string')


        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        

    })   

    // 19th Test
    it("Testing smart contract function purchaseItem() that allows consumer to buy from retailer", async() => {
    
        const supplyChain = await SupplyChain.deployed()
    
        await supplyChain.addConsumer(consumerID)
    
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event SoldByGrower()
        supplyChain.PurchasedByConsumer(null, (error, event) => {
            eventEmitted = true
        })

        stateStr = "Purchased By Consumer";

        //
        // Mark an item as SoldByDistributor by calling function buyBaleFromDistributor()
        //
        await supplyChain.purchaseItem(upc, baleId, retailId, {from: consumerID, value: retailPrice})

        //
        // Retrieve the just now saved item from blockchain 
        // need to use fetchBaleAddresses, fetchFarmInfo, fetchBaleInfo
        //
        const addrsBuffer = await supplyChain.fetchBaleAddressInfo.call(upc, baleId)
        assert.equal(addrsBuffer[1], originGrowerID, 'Error: Missing or invalid originGrowerID')
        assert.equal(addrsBuffer[2], testerID, 'Error: Missing or invalid testerID')
        assert.equal(addrsBuffer[3], distributorID, 'Error: Missing or invalid distributorID')
        assert.equal(addrsBuffer[4], retailerID, 'Error: Missing or invalid retailerID')

        const farmInfoBuffer = await supplyChain.fetchFarmInfo.call(originGrowerID)
        assert.equal(farmInfoBuffer[0], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(farmInfoBuffer[1], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(farmInfoBuffer[2], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(farmInfoBuffer[3], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        const baleInfoBuffer = await supplyChain.fetchBaleInfo.call(upc,baleId)
        assert.equal(baleInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(baleInfoBuffer[1], strainName, 'Error: Invalid item strainName')
        assert.equal(baleInfoBuffer[2], thcPct, 'Error: Invalid item thcPct')
        assert.equal(baleInfoBuffer[3], cbdPct, 'Error: Invalid item cbdPct')
        assert.equal(baleInfoBuffer[4], productNotes, 'Error: Invalid item productNotes')
        assert.equal(baleInfoBuffer[5], growerPrice, 'Error: Invalid item growerPrice')
        assert.equal(baleInfoBuffer[6], distributorPrice, 'Error: Invalid item distributorPrice')
        assert.equal(baleInfoBuffer[7], numRetail, 'Error: Invalid item numRetail')
       // assert.equal(baleInfoBuffer[8], stateStr, 'Error: Invalid item State as string')

        const itemInfoBuffer = await supplyChain.fetchRetailItemInfo.call(upc,baleId,retailId)
        assert.equal(itemInfoBuffer[0], sku, 'Error: Invalid item SKU')
        assert.equal(itemInfoBuffer[1], retailPrice, 'Error: Invalid item retailPrice')
        assert.equal(itemInfoBuffer[2], consumerID, 'Error: Missing or invalid ownerID')
        assert.equal(itemInfoBuffer[5], stateStr, 'Error: Invalid item State as string')
        
        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted')        


    })   

});

